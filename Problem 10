//Get a 4 digit number from user (Press the switch  Sequentially (Example 1256)
// Add the sum of  Them the sum is more than 1 digit then add  them again and show the sum on display.
void setup() {
  volatile char *dirf, *dirk;
  dirf = 0x30; 
  *dirf = 0xFF;
  dirk = 0x107; 
  *dirk = 0x00;
}

void loop() {
  volatile char *outf, *ink, x;
  volatile long i, j;
  int sum = 0;
  outf = 0x31; 
  ink = 0x106; 
  *ink = 0x00;
  int digits[4] = {0};
  for (j = 0; j < 4; j++) {
    while (1) {
      x = *ink;
      if ((x & 0x01) == 0x01) {
        digits[j] = 1;
        break;
      } 
      else if ((x & 0x02) == 0x02) {
        digits[j] = 2;
        break;
      } 
      else if ((x & 0x04) == 0x04) {
        digits[j] = 3;
        break;
      }
       else if ((x & 0x08) == 0x08) {
        digits[j] = 4;
        break;
      } 
      else if ((x & 0x10) == 0x10) {
        digits[j] = 5;
        break;
      } 
      else if ((x & 0x20) == 0x20) {
        digits[j] = 6;
        break;
      } 
      else if ((x & 0x40) == 0x40) {
        digits[j] = 7;
        break;
      }
       else if ((x & 0x80) == 0x80) {
        digits[j] = 8;
        break;
      }
    }
    for (i = 0; i < 500000; i++);
  }

  // Sum the digits
  for (j = 0; j < 4; j++) {
    sum += digits[j];
  }
  // Reduce sum to a single digit
  while (sum >= 10) {
    sum = (sum / 10) + (sum % 10);
  }
  while (1) {
    switch (sum) {
      case 0: *outf = 0x3F; 
      break;
      case 1: *outf = 0x06;
       break;
      case 2: *outf = 0x5B;
       break;
      case 3: *outf = 0x4F;
       break;
      case 4: *outf = 0x66;
       break;
      case 5: *outf = 0x6D;
       break;
      case 6: *outf = 0x7D; 
      break;
      case 7: *outf = 0x07;
       break;
      case 8: *outf = 0x7F;
       break;
      case 9: *outf = 0x6F;
       break;
      default: *outf = 0x00;
       break;
    }
    for (i = 0; i < 500000; i++);
  }
}
